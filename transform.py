import numpy as np
import fractions
from sympy import Rational
import wincnn

class Transform(object):
    def __init__(self):
        self.A = {}
        self.G = {}
        self.B = {}
        self.A[(2, 3)] = np.array([[1., 1., 1., 0.],
                             [0., 1.,-1.,-1.]]).astype('float64')
        self.G[(2, 3)] = np.array([[  1.,   0.,   0.],
                             [1/2., 1/2., 1/2.],
                             [1/2.,-1/2., 1/2.],
                             [  0.,   0.,   1.]]).astype('float64')
        self.B[(2, 3)] = np.array([[1., 0.,-1., 0.],
                             [0., 1., 1., 0.],
                             [0.,-1., 1., 0.],
                             [0., 1., 0.,-1.]]).astype('float64')
        points = (0,1,-1,Rational(1,2),-Rational(1,2),Rational(1,3),-Rational(1,3),Rational(3,2),-Rational(3,2),-3,2,-2)
        self.A[(2, 5)], self.G[(2, 5)], self.B[(2, 5)] = wincnn.showCookToomFilter((0,1,-1,2,-2), 2, 5)
        self.A[(2, 9)], self.G[(2, 9)], self.B[(2, 9)] = wincnn.showCookToomFilter(points, 2, 9)
        self.A[(2, 7)], self.G[(2, 7)], self.B[(2, 7)] = wincnn.showCookToomFilter(points, 2, 7)
        self.A[(2,11)], self.G[(2,11)], self.B[(2,11)] = wincnn.showCookToomFilter(points, 2, 11)
        self.A[(9, 5)], self.G[(9, 5)], self.B[(9, 5)] = wincnn.showCookToomFilter(points, 9, 5)
#        self.A25 = np.array([[1., 1., 1., 1., 1., 0.],
#                             [0., 1.,-1., 2.,-2., 1.]]).astype('float32')
#        self.G25 = np.array([[ 1/4.,    0.,   0.,   0.,   0.],
#                             [-1/6., -1/6.,-1/6.,-1/6.,-1/6.],
#                             [-1/6.,  1/6.,-1/6., 1/6.,-1/6.],
#                             [1/24., 1/12., 1/6., 1/3., 2/3.],
#                             [1/24.,-1/12., 1/6.,-1/3., 2/3.],
#                             [   0.,    0.,   0.,   0.,   1.]]).astype('float32')
#        self.B25 = np.array([[4., 0.,-5., 0., 1., 0.],
#                             [0.,-4.,-4., 1., 1., 0.],
#                             [0., 4.,-4.,-1., 1., 0.],
#                             [0.,-2.,-1., 2., 1., 0.],
#                             [0., 2.,-1.,-2., 1., 0.],
#                             [0., 4., 0.,-5., 0., 1.]]).astype('float32')
#        self.A29 = np.array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 0.],
#                             [0., 1.,-1., 2.,-2., 3.,-3., 4.,-4., 1.]]).astype('float32')
#        self.G29 = np.array([[  1/576.,       0.,      0.,     0.,     0.,      0.,      0.,       0.,       0.],
#                             [ -1/720.,  -1/720., -1/720.,-1/720.,-1/720., -1/720., -1/720.,  -1/720.,  -1/720.],
#                             [ -1/720.,   1/720., -1/720., 1/720.,-1/720.,  1/720., -1/720.,   1/720.,  -1/720.],
#                             [ 1/1440.,   1/720.,  1/360., 1/180.,  1/90.,   1/45.,   2/45.,    4/45.,    8/45.],
#                             [ 1/1440.,  -1/720.,  1/360.,-1/180.,  1/90.,  -1/45.,   2/45.,   -4/45.,    8/45.],
#                             [-1/5040., -1/1680., -1/560.,-3/560.,-9/560.,-27/560.,-81/560.,-243/560.,-729/560.],
#                             [-1/5040.,  1/1680., -1/560., 3/560.,-9/560., 27/560.,-81/560., 243/560.,-729/560.],
#                             [1/40320., 1/10080., 1/2520., 1/630., 2/315.,  8/315., 32/315., 128/315., 512/315.],
#                             [1/40320.,-1/10080., 1/2520.,-1/630., 2/315., -8/315., 32/315.,-128/315., 512/315.],
#                             [      0.,       0.,      0.,     0.,     0.,      0.,      0.,       0.,       1.]]).astype('float32')
#        self.B29 = np.array([[576.,    0., -820.,    0., 273.,   0., -30.,   0.,  1.,  0.],
#                             [  0., -576., -576.,  244., 244., -29., -29.,   1.,  1.,  0.],
#                             [  0.,  576., -576., -244., 244.,  29., -29.,  -1.,  1.,  0.],
#                             [  0., -288., -144.,  338., 169., -52., -26.,   2.,  1.,  0.],
#                             [  0.,  288., -144., -338., 169.,  52., -26.,  -2.,  1.,  0.],
#                             [  0., -192.,  -64.,  252.,  84., -63., -21.,   3.,  1.,  0.],
#                             [  0.,  192.,  -64., -252.,  84.,  63., -21.,  -3.,  1.,  0.],
#                             [  0., -144.,  -36.,  196.,  49., -56., -14.,   4.,  1.,  0.],
#                             [  0.,  144.,  -36., -196.,  49.,  56., -14.,  -4.,  1.,  0.],
#                             [  0.,  576.,    0., -820.,   0., 273.,   0., -30.,  0.,  1.]]).astype('float32')
#        self.A95 = np.array([[1.,  1.,   1.,     1.,      1.,      1.,       1.,        1.,         1.,     1.,   1.,    1., 0.],
#                             [0.,  1.,  -1.,   1/2.,   -1/2.,    1/3.,    -1/3.,      3/2.,      -3/2.,    -3.,   2.,   -2., 0.],
#                             [0.,  1.,   1.,   1/4.,    1/4.,    1/9.,     1/9.,      9/4.,       9/4.,     9.,   4.,    4., 0.],
#                             [0.,  1.,  -1.,   1/8.,   -1/8.,   1/27.,   -1/27.,     27/8.,     -27/8.,   -27.,   8.,   -8., 0.],
#                             [0.,  1.,   1.,  1/16.,   1/16.,   1/81.,    1/81.,    81/16.,     81/16.,    81.,  16.,   16., 0.],
#                             [0.,  1.,  -1.,  1/32.,  -1/32.,  1/243.,  -1/243.,   243/32.,   -243/32.,  -243.,  32.,  -32., 0.],
#                             [0.,  1.,   1.,  1/64.,   1/64.,  1/729.,   1/729.,   729/64.,    729/64.,   729.,  64.,   64., 0.],
#                             [0.,  1.,  -1., 1/128., -1/128., 1/2187., -1/2187., 2187/128., -2187/128., -2187., 128., -128., 0.],
#                             [0.,  1.,   1., 1/256.,  1/256., 1/6561.,  1/6561., 6561/256.,  6561/256.,  6561., 256.,  256., 1.]]).astype('float32')
#        self.G95 = np.array([[          4/3.,             0.,             0.,            0.,           0.],
#                             [         1/20.,          1/20.,          1/20.,         1/20.,        1/20.],
#                             [         1/10.,         -1/10.,          1/10.,        -1/10.,        1/10.],
#                             [     -128/175.,       -64/175.,       -32/175.,      -16/175.,      -8/175.],
#                             [     -128/125.,        64/125.,       -32/125.,       16/125.,      -8/125.],
#                             [177147/134750.,  59049/134750.,  19683/134750.,  6561/134750., 2187/134750.],
#                             [177147/107800., -59049/107800., -19683/107800., -6561/107800., 2187/107800.],
#                             [   -128/24255.,      -64/8085.,      -32/2695.,     -48/2695.,    -72/2695.],
#                             [    -128/8085.,       64/2695.,      -96/2695.,     144/2695.,   -216/2695.],
#                             [     -1/63000.,       1/21000.,       -1/7000.,       3/7000.,     -9/7000.],
#                             [       2/6125.,        4/6125.,        8/6125.,      16/6125.,     32/6125.],
#                             [       2/1225.,       -4/1225.,        8/1225.,     -16/1225.,     32/1225.],
#                             [            0.,             0.,             0.,            0.,           1.]]).astype('float32')
#        self.B95 = np.array([[3/4.,  1/4., -529/48., -529/144.,    353/8.,  353/24.,  -859/16.,   -859/48.,    137/6.,  137/18.,      -3., -1.,   0.],
#                             [  0.,  3/4.,       1.,  -481/48.,  -493/36., 2191/72.,  1625/36., -1231/144.,   -238/9.,  -65/18.,       4.,  1.,   0.],
#                             [  0., -3/4.,     1/2.,   505/48.,  -493/72., -671/18.,  1625/72.,  4481/144.,   -119/9., -173/18.,       2.,  1.,   0.],
#                             [  0.,  3/2.,     7/2.,  -361/24., -2695/72.,  241/18.,  2023/36.,    361/72., -1855/72., -211/36.,     7/2.,  1.,   0.],
#                             [  0., -3/2.,     5/2.,   409/24., -1925/72.,  -313/9.,  1445/36.,   1951/72., -1325/72., -319/36.,     5/2.,  1.,   0.],
#                             [  0.,  9/4.,    15/2.,  -169/16., -1025/24.,    17/4.,    455/8.,    153/16.,      -25.,   -13/2.,    10/3.,  1.,   0.],
#                             [  0., -9/4.,       6.,   241/16.,   -205/6.,  -239/8.,     91/2.,    393/16.,      -20.,   -17/2.,     8/3.,  1.,   0.],
#                             [  0.,  1/2.,     1/2.,  -505/72.,    -57/8.,    74/3.,    105/4.,   -439/24.,   -193/8.,  -31/36.,     9/2.,  1.,   0.],
#                             [  0., -1/2.,     1/6.,   521/72.,    -19/8.,  -167/6.,     35/4.,    719/24.,  -193/24., -355/36.,     3/2.,  1.,   0.],
#                             [  0., -1/4.,       0.,  529/144.,        0., -353/24.,        0.,    859/48.,        0., -137/18.,       0.,  1.,   0.],
#                             [  0.,  3/8.,    5/16.,  -257/48.,  -325/72.,  713/36., 2485/144., -2623/144.,  -325/18.,   43/18.,       5.,  1.,   0.],
#                             [  0., -3/8.,    1/16.,   263/48.,   -65/72., -389/18.,  497/144.,  3617/144.,   -65/18., -173/18.,       1.,  1.,   0.],
#                             [  0., -3/4.,    -1/4.,   529/48.,  529/144.,  -353/8.,  -353/24.,    859/16.,   859/48.,  -137/6., -137/18.,  3.,   1.]]).astype('float32')
#        for attr in dir(self):
#            if attr.isupper():
#                mat = getattr(self, attr)
#                mat = np.expand_dims(mat, axis=0) 
#                mat = np.expand_dims(mat, axis=0)
#                setattr(self, attr, mat)

if __name__=='__main__':
    np.set_printoptions(formatter={'all':lambda x: str(fractions.Fraction(x).limit_denominator())})
    trans = Transform()
    for i in trans.A:
        print('=============================')
        print(i)
        print(trans.A[i])
        print('-----------------------------')
        print(trans.B[i])
        print('-----------------------------')
        print(trans.G[i])

